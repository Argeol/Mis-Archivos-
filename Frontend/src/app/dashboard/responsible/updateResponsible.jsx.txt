"use client";

import { useState, useEffect } from "react";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import axiosInstance from "@/lib/axiosInstance";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";

export default function UpdateResponsible({ responsible, onClose }) {
  const queryClient = useQueryClient();

  const [formData, setFormData] = useState({
    responsible_Id: responsible.responsible_Id,
    nom_Responsible: responsible.nom_Responsible || "",
    ape_Responsible: responsible.ape_Responsible || "",
    tel_Responsible: responsible.tel_Responsible || "",
    roleId: responsible.roleId || 0,
    state: responsible.state || "Activo",
  });

  useEffect(() => {
    setFormData({
      responsible_Id: responsible.responsible_Id,
      nom_Responsible: responsible.nom_Responsible || "",
      ape_Responsible: responsible.ape_Responsible || "",
      tel_Responsible: responsible.tel_Responsible || "",
      roleId: responsible.roleId || 0,
      state: responsible.state || "Activo",
    });
  }, [responsible]);

  // ✅ Mutación para actualizar responsable
  const mutation = useMutation({
    mutationFn: async () => {
      await axiosInstance.put(
        `/api/Responsible/UpdateResponsible/${formData.responsible_Id}`,
        formData
      );
    },
    onSuccess: () => {
      queryClient.invalidateQueries(["responsibles"]);
      onClose(); // Cierra el modal o formulario tras actualizar
    },
    onError: (error) => {
      alert(error.response?.data?.message || "Error al actualizar responsable.");
    },
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    mutation.mutate();
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4 p-4 border rounded-lg">
      <Input
        name="nom_Responsible"
        placeholder="Nombre"
        value={formData.nom_Responsible}
        onChange={handleChange}
        required
      />
      <Input
        name="ape_Responsible"
        placeholder="Apellido"
        value={formData.ape_Responsible}
        onChange={handleChange}
        required
      />
      <Input
        name="tel_Responsible"
        placeholder="Teléfono"
        value={formData.tel_Responsible}
        onChange={handleChange}
        required
      />
      <Input
        name="roleId"
        type="number"
        placeholder="Rol ID"
        value={formData.roleId}
        onChange={handleChange}
        required
      />
      <Input
        name="state"
        placeholder="Estado"
        value={formData.state}
        onChange={handleChange}
        required
      />
      <Button type="submit" disabled={mutation.isLoading}>
        {mutation.isLoading ? "Actualizando..." : "Actualizar"}
      </Button>
    </form>
  );
}
